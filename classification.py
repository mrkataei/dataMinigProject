# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BS9nw0CWAJH9F9Pz5bPTN5nau0sZKCtJ
"""

import pandas as pd
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from google.colab import drive

keifiat_dataFrame = pd.read_excel("/content/drive/MyDrive/digikalaData/keifiat.xlsx" )
keifiat_dataFrame.drop_duplicates()
keifiat_dataFrame.dropna(axis = 0, how ='any')  
del keifiat_dataFrame['product_id']
del keifiat_dataFrame['title_en']
del keifiat_dataFrame['product_title']
del keifiat_dataFrame['user_id']
del keifiat_dataFrame['verification_status']
del keifiat_dataFrame['title']
del keifiat_dataFrame['comment']
del keifiat_dataFrame['advantages']
del keifiat_dataFrame['disadvantages']
keifiat_dataFrame = keifiat_dataFrame[keifiat_dataFrame['recommend'] != "\\N"]
keifiat_dataFrame = keifiat_dataFrame[keifiat_dataFrame['likes'] <100]
keifiat_dataFrame = keifiat_dataFrame[keifiat_dataFrame['dislikes'] <100]

#keifiat_dataFrame['recommend'] = keifiat_dataFrame['recommend'].replace("\\N", "no_idea")
keifiat_dataFrame

X = keifiat_dataFrame.iloc[:,:-1].values
y = keifiat_dataFrame['recommend']

SVC_model = SVC()
KNN_model = KNeighborsClassifier(n_neighbors=10)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=27)

SVC_model.fit(X_train, y_train)
KNN_model.fit(X_train, y_train)

SVC_prediction = SVC_model.predict(X_test)
KNN_prediction = KNN_model.predict(X_test)

# Accuracy score is the simplest way to evaluate
print(accuracy_score(SVC_prediction, y_test))
print(accuracy_score(KNN_prediction, y_test))
# But Confusion Matrix and Classification Report give more details about performance
print(confusion_matrix(SVC_prediction, y_test))
print(classification_report(KNN_prediction, y_test))

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(X_train, y_train).predict(X_test)
print(accuracy_score(y_pred, y_test))
print(classification_report(y_pred, y_test))

from sklearn import tree
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)
y_pred = gnb.fit(X_train, y_train).predict(X_test)
print(accuracy_score(y_pred, y_test))
print(classification_report(y_pred, y_test))

from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0).fit(X, y)
y_pred = clf.fit(X_train, y_train).predict(X_test)
print(accuracy_score(y_pred, y_test))
print(classification_report(y_pred, y_test))