# -*- coding: utf-8 -*-
"""clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1krM4YRW6vOTC6nHblIbmothiu625Qopw
"""

from google.colab import drive
import pandas as pd
from numpy import unique
from numpy import where
from sklearn.metrics import  silhouette_score as ss
from matplotlib import pyplot

keifiat_dataFrame = pd.read_excel("/content/drive/MyDrive/digikalaData/keifiat.xlsx" )
keifiat_dataFrame.drop_duplicates()
keifiat_dataFrame.dropna(axis = 0, how ='any')  
del keifiat_dataFrame['product_id']
del keifiat_dataFrame['title_en']
del keifiat_dataFrame['product_title']
del keifiat_dataFrame['user_id']
del keifiat_dataFrame['verification_status']
del keifiat_dataFrame['title']
del keifiat_dataFrame['comment']
del keifiat_dataFrame['advantages']
del keifiat_dataFrame['disadvantages']
keifiat_dataFrame = keifiat_dataFrame[keifiat_dataFrame['recommend'] != "\\N"]
keifiat_dataFrame = keifiat_dataFrame[keifiat_dataFrame['likes'] <100]
keifiat_dataFrame = keifiat_dataFrame[keifiat_dataFrame['dislikes'] <100]

#keifiat_dataFrame['recommend'] = keifiat_dataFrame['recommend'].replace("\\N", "no_idea")
keifiat_dataFrame

recommend = {'recommended' : 1 , 'no_idea' : 0 , 'not_recommended' : -1}
keifiat_dataFrame['recommend'] = keifiat_dataFrame['recommend'].map(recommend)
keifiat_dataFrame

kt = keifiat_dataFrame.to_numpy()

from sklearn.cluster import DBSCAN
model = DBSCAN(eps=0.30, min_samples=9)
yhat = model.fit_predict(keifiat_dataFrame)
clusters = unique(yhat)
# create scatter plot for samples from each cluster

for cluster in clusters:
	row_ix = where(yhat == cluster)
	pyplot.scatter(kt[row_ix, 0], kt[row_ix, 1])
pyplot.show()

score = ss(keifiat_dataFrame, model.labels_, metric='euclidean')
score

from sklearn.cluster import KMeans
model = KMeans(n_clusters=2)
model.fit(keifiat_dataFrame)
yhat = model.predict(keifiat_dataFrame)
clusters = unique(yhat)

for cluster in clusters:
	row_ix = where(yhat == cluster)
	pyplot.scatter(kt[row_ix, 0], kt[row_ix, 1])
pyplot.show()

score = ss(keifiat_dataFrame, model.labels_, metric='euclidean')
score

from sklearn.cluster import MiniBatchKMeans
model = MiniBatchKMeans(n_clusters=2)
model.fit(keifiat_dataFrame)
yhat = model.predict(keifiat_dataFrame)
clusters = unique(yhat)

for cluster in clusters:
	row_ix = where(yhat == cluster)
	pyplot.scatter(kt[row_ix, 0], kt[row_ix, 1])
pyplot.show()

score = ss(keifiat_dataFrame, model.labels_, metric='euclidean')
score

from sklearn.mixture import GaussianMixture
model = GaussianMixture(n_components=3)
model.fit(keifiat_dataFrame)
yhat = model.predict(keifiat_dataFrame)
clusters = unique(yhat)

for cluster in clusters:
	row_ix = where(yhat == cluster)
	pyplot.scatter(kt[row_ix, 0], kt[row_ix, 1])
pyplot.show()